# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - avoid_print
    - prefer_single_quotes
    - avoid_unused_constructor_parameters
    - await_only_futures
    - directives_ordering
    - empty_constructor_bodies
    - empty_statements
    - hash_and_equals
    - implementation_imports
    - null_closures
    - package_api_docs
    - slash_for_doc_comments
    - test_types_in_equals
    - throw_in_finally
    - type_init_formals
    - always_use_package_imports
    - cancel_subscriptions
    - prefer_final_locals
    - use_super_parameters

analyzer:
  exclude: [build/**]
  language:
    # strict-casts: true
    # strict-raw-types: true
    # strict-inference: true

strong-mode:
  implicit-casts: false
  implicit-dynamic: false

errors:
  include_file_not_found: error
  dead_code: warning
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
